# -*- coding: utf-8 -*-
"""Pro15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pwGrk5xte0rjZ6FNxi1C-1cjgwo11eEv

# Tinkoff VoiceKit

Задание Pro
Скачайте аудио по ссылке.
https://drive.google.com/file/d/1jWatVeG3OL2BL8qmI_GvucHklk9LIcHw/view?usp=sharing

Сохраните в отдельный файл отрезок этой аудиозаписи (с 15 секунды до конца). При помощи сервиса Tinkoff VoiceKit выполните распознавание речи этой записи и выведите на экран речь менеджера и клиента в формате:
Менеджер: Добрый день
Клиент: Да, здравствуйте
Менеджер: Мария?
Клиент: Да, это я
…
Отделить менеджера и клиента можно при помощи каналов (речь каждого записана в отдельный каналы).
"""

# установка библиотек
!pip install tinkoff-voicekit-client protobuf==3.20.3

from IPython.display import Audio

# воспроизведем аудио
Audio('datapro/call.mp3')

import getpass

# передаем API_KEY
API_KEY = getpass.getpass("Tinkoff API Key:")

# передаем SECRET_KEY
SECRET_KEY = getpass.getpass("Tinkoff SECRET Key:")

from tinkoff_voicekit_client import ClientSTT
from pprint import pprint

# создаем клиент, передаем ключи
client = ClientSTT(API_KEY, SECRET_KEY)

# указываем параметры аудио
audio_config = {
    "encoding": "MPEG_AUDIO",
    "sample_rate_hertz": 16000,
    "num_channels": 2,
    }

# вызываем метод recognize
response = client.recognize("datapro/call.mp3",
                            audio_config)
pprint(response)

import json
with open("datapro/out.json","w",encoding="utf-8") as f:
    json.dump(response,f,ensure_ascii=False)

res = response["results"]
r = res[0]
channel = r["channel"]
start_time = r["start_time"]
alternatives =r["alternatives"]
transcript = alternatives[0]["transcript"]
if float(start_time.replace("s",""))>15:
    print(channel, start_time,alternatives,)
    print(transcript)

float(start_time.replace("s",""))

res = response["results"]
for r in res:
    channel = r["channel"]
    start_time = r["start_time"]
    alternatives =r["alternatives"]
    transcript = alternatives[0]["transcript"]
    if float(start_time.replace("s",""))>15:
        role ="Менеджер:"
        if channel==1:
            role ="Клиент:"
        print(role, transcript)

# # создаем клиент, передаем ключи
# client = ClientSTT(API_KEY, SECRET_KEY)
#
# # указываем параметры аудио
# audio_config = {
#     "encoding": "MPEG_AUDIO",             # кодировка
#     "sample_rate_hertz": 16000,           # частота
#     "num_channels": 2,                    # количество каналов
#     "enable_automatic_punctuation": True  # включаем пунктуацию
# }
#
# # указываем параметры аудио
# stream_config = {"config": audio_config}
# # вызываем метод recognize
# response = client.recognize("datapro/call.mp3",
#                             audio_config)
# pprint(response)