# -*- coding: utf-8 -*-
"""Базовый блок | Синтаксис Python #1 | УИИ

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KwsknDYT-51RKcAZgCaVV-LqsjJN7xQE

**Содержание темы**

1. Часть 1

2. [Часть 2](https://colab.research.google.com/drive/1Jqy7YZIk2UlL9rPphk-NtQtLpaxO-o4U?usp=sharing)

#Введение

Привет!

Урок по синтаксису — первый шаг на пути изучения **искусственного интеллекта (ИИ)**. Сто лет назад даже писатели-фантасты не могли бы предположить, что уже за два занятия вы создадите собственный ИИ!

Но этот путь тернист. Запомните те чувства восхищения и предвкушения, которые вас сейчас переполняют, и мысленно возвращайтесь к ним каждый раз, когда мотивация утихнет.

Сегодня вы изучите **Google Colaboratory** – среду, в которой вы сейчас находитесь. А также познакомитесь с основами языка программирования **Python**, с помощью которого вы реализуете свои проекты по ИИ.

 Приступим!

**Google Colaboratory**

Наверняка вы не раз работали с Google Документами или Google Таблицами. **Google Colab** – это такой же сервис, только для программирования, в котором пишут код **Python** прямо в браузере и делятся им с коллегами или друзьями для совместного просмотра и редактирования. Один такой документ в Colab называют *ноутбуком* (или *блокнотом*).

Сейчас вы находитесь в ноутбуке первого занятия. Чтобы его редактировать, создайте копию ноутбука, которая будет храниться на вашем Google Диске. Для этого откройте меню «Файл» в верхнем левом углу и выберите пункт «Сохранить копию на Диске» (для англоязычного браузера – File/Save a copy in Drive).


В новой вкладке браузера станет доступна ваша личная копия ноутбука.

Среда Colab состоит из ячеек. Они бывают двух типов: **для текста** и **для кода**. Первые используют для написания комментариев и пояснений к коду, а во вторых – пишут и запускают сам код. До сих пор вы читали только текстовые ячейки, а теперь рассмотрим ячейку кода:
"""

60 * 60 * 24                              # Расчет количества секунд в сутках

"""В ней написан простой код, который вычисляет количество секунд в сутках.

Используя символ `#`, вы можете указать текстовый комментарий к коду -  дополнительное пояснение, которое не влияет на работу программы. Комментарии используются для того, чтобы сделать код понятным и легко разбираемым (поэтому стоит уже на первых шагах вырабатывать в себе привычку комментировать свой код).

1.	Чтобы запустить ячейку, нажмите на значок запуска слева от нее. Либо выберите ячейку левой кнопкой мыши и нажмите горячие клавиши Ctrl + Enter (или Shift + Enter).
2.	Чтобы создать новую ячейку, воспользуйтесь кнопками в левом верхнем углу экрана: «+ Код» («+ Code)» и «+ Текст» («+ Text») для создания ячейки с кодом и текстом соответственно.
3.	Чтобы редактировать текстовую ячейку, нажмите на нее два раза левой кнопкой мыши.
4. Для создания нового ноутбука, выберите пункт меню Файл/Создать блокнот (File/New notebook)
5. Чтобы ваш ноутбук был доступен для просмотра другим пользователям, необходимо открыть к нему доступ. Для этого нажмите кнопку «Поделиться» («Share») в правом верхнем углу экрана. В появившемся окне нажмите кнопку «Получить ссылку» («Get link») и выберите опцию «Доступно пользователям, у которых есть ссылка» («Anyone with the link»). Скопируйте ссылку и поделитесь ей с коллегами.


# Синтаксис **Python**

Язык программирования напоминает естественный язык, на котором общаются люди. Только он создан для того, чтобы общаться с компьютером: буквально давать ему набор инструкций, какие действия совершить.

Как уже было сказано, вы будете пользоваться **Python**. У него, как и у любого другого языка, есть свой **синтаксис** – набор правил, которые помогут вам точно сформулировать требуемые действия.

<hr>
<h4><strong>Важно: учитывайте, что компьютер – не человек (по крайней мере, пока что), поэтому он не поймет вас, если вы опечатаетесь!</strong></h4>
<hr>

Более того, ваш код будут читать и другие люди, поэтому существует ряд соглашений, которые позволяют сделать код легче читаемым. О некоторых из них вы сегодня узнаете.

На сегодняшнем уроке «Синтаксис **Python**» вы изучите следующие темы:
* стандартные функции языка – функция `print()`;
* арифметические операции;
* переменные;
* типы данных;
* ввод данных – функция `input()`;
* логические условия и условный оператор `if...else`;
* циклы `for` и `while`;
* списки;
* кортежи;
* словари;
* функции в **Python**.

##Стандартные функции языка

Представьте, что вы пишете программу. И некоторые действия в этой программе повторяются. Например, вывод какой-либо информации на экран. И каждый раз, когда вы хотите вывести что-то на экран, вам нужно записывать много-много строк кода.

Как упростить эту задачу? Создать такую команду, которая будет содержать в себе все эти строки кода, чтобы не писать их заново каждый раз. Мы только что с вами придумали **функции**!


**Функции** – это маленькие программы, которые умеют выполнять какую-то операцию. Есть встроенные функции, например, `print()` и `input()`. Также функции можно создавать самому. Все это вы изучите уже на первом занятии!

Для использования функции ее необходимо вызвать. Сделать это очень просто:

<blockquote><h4>после имени функции следуют круглые скобки, в которых могут быть указаны аргументы – над какими объектами будет выполнена операция</h4>
</blockquote>

<h1><strong>print()</strong> - функция вывода на экран</h1>

Начнем знакомство со стандартной функции - `print()` (*функция вывода информации, указанной в скобках, на экран*).
"""

# В качестве аргумента можно указать число, например, 14
print(14)

# Либо несколько чисел, в таком случае аргументы разделяются запятыми
print(1, 2, 3, 4, 5)

"""В примере выше вы сначала вывели на экран число 14, а затем вывели числа 1, 2, 3, 4 и 5.

Также функция `print()` может выводить на экран текст. Для этого аргумент нужно заключить в кавычки – двойные или одинарные:

"""

# В данном случае аргументом функции является строка "Hello, world!"
print("Hello, world!")

# В качестве аргументов можно указать и строки, и числа, и цифры одновременно
print("Hello, world!", 123, 'раз два', 1, 2, 3)

"""<h3> <strong> Дополнительные параметры функций </strong> </h3>

У каждой функции может быть ряд дополнительных параметров.

Чтобы узнать, какие параметры имеет функция, напишите в ячейке название функции и знак вопроса:
"""

print?

"""В открывшемся окне появится подробная справка по функции со всеми параметрами и разъяснениями к ним.

Например, у функции `print()` четыре параметра. Поговорим о двух из них – `sep=''`и `end='\n'`.

Начнем с `sep=''`. По умолчанию аргументы при выводе разделены пробелом, но вы можете указать любой другой символ с помощью параметра `sep=`.
"""

# Эта строка выведет на экран аргументы 1, 2, 3, 4 и 5 через пробелы (по умолчанию)
print(1, 2, 3, 4, 5)

# А эта строка выведет аргументы 1, 2, 3, 4 и 5 через символ "|", окруженный пробелами
print(1, 2, 3, 4, 5, sep=' | ')

# Не обязательно указывать только один символ, можно написать целое слово
print(1, 2, 3, 4, 5, sep=' пробел ')

"""Параметр `end='\n'` задает строку или символ, которыми будет заканчиваться выводимая строка.

По умолчанию это перенос строки `'\n'` (как нажатие клавиши Enter).

То есть, если вы три раза вызовете функцию `print()`, то каждая из них выведет информацию на экран с новой строки.
"""

print('Первая строка')
print('Вторая строка')
print('Третья строка')

"""С помощью параметра `end='\n'` вы можете задать свой собственный символ (или строку). Например, сделать так, чтобы строки разделялись символом "#":"""

print('Первая строка', end=' # ')
print('Вторая строка', end=' # ')
print('Третья строка', end=' # ')

"""Кстати, в Google Сolaboratory результат выполнения последней строки кода, если он есть, автоматически выводится на экран. Например:"""

'Первая строка кода'
'Вторая строка кода'
123
'Последняя строка кода'

"""Но лучше пользуйтесь функцией `print()`, чтобы при добавлении новых строк кода не потерялась какая-либо значимая информация:"""

'Эту строку обязательно нужно вывести на экран!!'

print(100)

"""Как видите, на экране отобразился только результат работы функции `print()`.

Вот и всё! Вы написали первую программу: очень простую, но программу. Теперь вы можете вывести любую информацию на экран с помощью функции `print()`.

В следующем разделе вы рассмотрите арифметические операции и напишете программу для подсчета количества секунд в сутках!

---
Дополнительная информация ([База знаний УИИ - «**функция print()**»](https://colab.research.google.com/drive/1PYnLch4uSb2W5su7WQAxpCc4aEXDsXCa?usp=sharing))

---

##Арифметические операции

Язык **Python** позволяет давать компьютеру задания по вычислениям. В арсенале вы имеете следующие операции:
1.	Сложение: `+`
2.	Вычитание: `-`
3.	Умножение: `*`
4.	Деление: `/`
5.	Возведение в степень: `**`
6.	Целочисленное деление: `//`
7.	Остаток от деления: `%`

Остановимся подробнее на последних двух.

**Целочисленное деление** возвращает только целую часть операции деления. Например, при делении 10 // 3 в ответе вы получите 3. Потому что в числе 10 помещается только три тройки. Остаток от деления (1) отбрасывается.

**Операция взятия остатка** возвращает остаток от деления нацело. То есть при таком же делении 10 на 3 в остатке вы получите 1. Так как в числе 10 помещается три тройки, а в остатке остается 1. Операция записывается так: 10 % 3

А теперь комбинируем арифметические операции с функцией `print()`. Напишем программу, которая будет производить все изученные операции с цифрами 10 и 3, а ответ выводить на экран:
"""

print(10 + 3)                             # Сложение
print(10 - 3)                             # Вычитание
print(10 * 3)                             # Умножение
print(10 / 3)                             # Деление
print(10 ** 3)                            # Возведение в степень
print(10 // 3)                            # Целочисленное деление (10 = 3 + 3 + 3 + 1 = 3 * 3 + 1)
print(10 % 3)                             # Остаток от деления (10 = 3 + 3 + 3 + 1 = 3 * 3 + 1)

"""Если взглянуть на выводимые данные, не совсем понятно, где результат деления, где результат сложения и так далее. Попробуйте самостоятельно написать в новой ячейке код, который будет выводить на экран такой результат:

        10 + 3 = 13
        10 - 3 = 7
        10 * 3 = 30
        10 / 3 = 3.333
        10 ** 3 = 1000
        10 // 3 = 3
        10 % 3 = 1

***Подсказка:***

Вам необходимо воспользоваться функцией `print()`, указав в скобках вначале текстовое значение  (например: `"10 + 3"`), а затем через запятую написать выражение, значение которого нужно вывести на экран (`10 + 3`).
"""

# Ваше решение

"""### Решение предыдущего примера (раскройте ячейку, если возникли трудности с решением задачи)"""

print("10 + 3 =", 10 + 3)                 # Сложение
print("10 - 3 =", 10 - 3)                 # Вычитание
print("10 * 3 =", 10 * 3)                 # Умножение
print("10 / 3 =", 10 / 3)                 # Деление
print("10 ** 3 =", 10 ** 3)               # Возведение в степень
print("10 // 3 =", 10 // 3)               # Целочисленное деление (10 = 3 + 3 + 3 + 1 = 3 * 3 + 1)
print("10 % 3 =", 10 % 3)                 # Остаток от деления (10 = 3 + 3 + 3 + 1 = 3 * 3 + 1)

"""Вот и все, ничего трудного, правда?
**Арифметические операции** – важная часть программирования. И вам, как нейронщикам, это знание обязательно пригодится. А еще вы не уедете далеко без переменных, поэтому в следующем разделе изучим именно их!

##Переменные

Помните последнюю ячейку кода из прошлого раздела? Где вы производили все арифметические операции с цифрами 10 и 3.

Допустим, вы решили заменить их на 5 и 2. Числа могут быть разбросаны по всему коду в тысячах строк, поэтому заменять их вручную – не вариант.

Для этого и нужны **переменные**!

Вы объявляете (создаете) переменную, указываете ее **имя** и задаете **значение**. А затем вы можете в любой момент обратиться по имени переменной к ее содержимому - значению. Рассмотрим на примере.

Создать переменную можно следующим образом:

        имя_переменной  = значение переменной
"""

# Объявление двух переменных и присваивание им значений
first_number = 10                         # Переменная под именем first_number
second_number = 3                         # Переменная под именем second_number

# Код из предыдущего примера, но с заменой всех чисел на переменные
print(first_number + second_number)
print(first_number - second_number)
print(first_number * second_number)
print(first_number / second_number)
print(first_number ** second_number)
print(first_number // second_number)
print(first_number % second_number)

"""Готово. Теперь вам достаточно поменять значения переменных (один раз, вместо четырнадцати).

Например, получим результат вычислений для чисел 9 и 7:
"""

# Объявление двух переменных и присваивание им значений
first_number = 9                          # Переменная под именем first_number
second_number = 7                         # Переменная под именем second_number

# Код из предыдущего примера, но с заменой всех чисел на переменные
print(first_number + second_number)
print(first_number - second_number)
print(first_number * second_number)
print(first_number / second_number)
print(first_number ** second_number)
print(first_number // second_number)
print(first_number % second_number)

"""Вы научились объявлять переменные. Теперь научимся правильно их называть:
* имя переменной должно начинаться с буквы, либо нижнего подчеркивания, но не с цифры;
* имя переменной не должно включать в себя специальные символы и пробелы (кроме нижнего подчеркивания);
* имя переменной не должно совпадать с зарезервированными ключевыми словами, например, `True`, `False`, `and`, `as` и некоторыми другими. В процессе изучения языка вы узнаете остальные;
* желательно, чтобы имя переменной было осмысленным и содержало в себе информацию о том, что хранится в переменной. Например, имя `xglrU123` - плохое, а `dollar_rate` – хорошее.


Вы можете присваивать переменным не только числовые значения, но и строковые. Рассмотрим пример ниже:

"""

# Объявление переменной с именем "number" и присваивание ей числового значения 110000
number = 110000

# Объявление переменной с именем "name" и присваивание ей строкового значения 'Jarvis'
name = 'Jarvis'

"""Вы объявили две переменные, а теперь выведите их значения на экран с помощью известной вам функции `print()`:

---
**Важно**

До запуска данной ячейки у вас уже должна быть ранее запущена ячейка из предыдущего блока с объявлением переменных.

Таким образом, переменные, которые вы создали один раз, будут доступны во всех ячейках ноутбука.

---
"""

print(number)
print(name)

"""Как видите, в качестве аргументов (**аргумент** - значение, которое передается в функцию) вы можете передавать не только строки и числа, но и значения переменных.

Напишем следующую программу: вы задаете площадь круга, а программа вычисляет его радиус. Для этого вам понадобится формула:

Площадь круга: $S=𝝅*r^2$

Радиус круга: $r = \sqrt{ \frac{s}{𝝅}}$

"""

# Объявление трех переменных:
# для площади, числа пи и радиуса
S = 100                                   # Площадь круга
pi = 3.14                                 # Число пи
r = (S / pi) ** 0.5                       # Радиус - сразу приравнивается к результату выражения

# Вывод полученного результата
print(r)

"""Обратите внимание, что операция извлечения квадратного корня равнозначна операции возведения в степень (`**0.5`).

Можно получить тот же результат, не объявляя переменную `r`:
"""

print((S / pi) ** 0.5)

"""Как вы заметили, в **Python** арифметические операции выполняются в соответствии с их приоритетом. Сначала выполняются операции в скобках, затем возведение в степень, затем умножение и деление, затем сложение и вычитание.

Но что если вы попытаетесь сложить строковую и числовую переменную? То есть буквально прибавить число к тексту. Чтобы понять, что произойдет, изучим следующую тему.

---
Дополнительная информация ([База знаний УИИ - «**переменные Python**»](https://colab.research.google.com/drive/1E4NEBt0osvtBLa2hf5iC4317bd2LkO97?usp=sharing))

---

##Типы данных

**Тип данных** – некоторое представление данных в программе (числа, строки, списки и т. д.). Язык **Python** поддерживает множество типов данных, вот самые основные:

* **int** *(integer numbers)* – целые числа;
* **float** *(floating-point numbers)* – числа с плавающей точкой (действительные числа);
* **str** *(string)* – строки;
* **bool** *(boolean)* – логический тип.
"""

integer = 3                               # Переменная типа int
float_number = 1.48376                    # Переменная типа float
text = "Hello, World!"                    # Строковая переменная (тип str)
isTrue = True                             # Логическая переменная (тип boolean),
                                          # может принимать только два значения
                                          # True или False (истина / ложь)

"""Функция `type()` определяет тип значения своего аргумента."""

print(type(integer))                      # Вывод типа значения переменных
print(type(float_number))
print(type(text))
print(type(isTrue))

"""Также можно преобразовать значение одного типа к другому типу данных, используя следующие функции:
* `int()` –  возвращает целое значение аргумента;
* `float()` – возвращает нецелочисленное (действительное) значение аргумента;
* `bool()` – возвращает булево (логическое) значение аргумента;
* `str()`– возвращает строковое значение аргумента.

Например:

"""

number = 1050
print(number, type(number))               # Проверка типа значения переменной
print(number * 3)

float_num = float(number)                 # Преобразование значения переменной к другому типу
print(float_num, type(float_num))
print(float_num / 8)

"""С помощью `float(number)` вы преобразовали значение переменной `number` к нецелочисленному типу `float`."""

text = str(number)
print(text, type(text))
print(text * 4)                           # Умножение строки на целое число - это повторение
                                          # строки несколько раз (конкатенация)

"""С помощью `str(number)` вы преобразовали значение переменной `number` к строковому типу `str`.

Обратите внимание на строчку кода: `print(text * 4)`.

В данном случае вы выполнили операцию конкатенации (объединения) строк. Поскольку тип переменной `text` - это строка, то **Python** не сможет осуществить операцию умножения (так как эта операция применима только к числовым типам данных). Вместо этого **Python** повторит строку 4 раза или другими словами: выполнит конкатенацию строки `text` 4 раза.

---
Дополнительная информация ([База знаний УИИ - «**Конкатенация строк**»](https://colab.research.google.com/drive/1Ajvp1B5_2VvLRWthtttQzB9rDKIdNCc4?usp=sharing))

---

---
Дополнительная информация ([База знаний УИИ - «**Типы данных Python**»](https://colab.research.google.com/drive/1srttlp8qt3KR4keNXo5X9OpauwmdfLhB?usp=sharing))

---

##Ввод информации

Для ввода информации с клавиатуры предусмотрена стандартная функция `input()`.

Она используется таким образом:
1. Запустите ячейку ниже;
2. Введите произвольное сообщение в появившееся поле ввода;
3. Нажмите клавишу **Enter**.
"""

input()

"""В качестве аргумента функции можно указать **строку-приглашение**:"""

input('Введите что-нибудь, пожалуйста: ') # Использование строки-приглашения к вводу

"""Введенную пользователем информацию можно сохранить в переменную:"""

some_value = input('Введите любое число, пожалуйста: ')  # Запись введенной информации
                                                        # в переменную, на выходе тип str (строка)
print(type(some_value))

"""<h4><hr>
<strong>Важно: любая введеная с помощью функции input() информация имеет строковый тип данных (str).</strong>
<hr></h4>

Поэтому, если в вашей программе пользователь должен вводить какую-либо числовую информацию, то введенные данные дополнительно необходимо преобразовать к одному из числовых типов (**int** или **float**):
"""

print(int(some_value) * 10)             # Преобразование значения переменной к числовому типу (int)

"""Пример:"""

name = input("Введите имя: ")             # Ввод данных
print("Здравствуйте, " + name + "!")      # Вывод в составе выражения

"""---
Дополнительная информация ([База знаний УИИ - «**Функция input()**»](https://colab.research.google.com/drive/1zPISPz37xEGdFvOTbcFB0Gz-r571rDuu?usp=sharing))

---

##Логические условия и условные операторы

В языке **Python** вы можете сравнивать значения следующими способами:
1.	Больше: `>`
2.	Меньше: `<`
3.	Больше или равно: `>=`
4.	Меньше или равно: `<=`
5.	Равно: `==`
6.	Не равно: `!=`

Результатом таких сравнений будет значение булевого типа (логический тип **boolean**) – значение **True** (истина) или **False** (ложь).
Рассмотрим на примере:
"""

print(1 > 2)
print(1 < 2)
print(100 == 100)
print(5 != 5)

"""Производя операции сравнения, вы как бы спрашиваете у **Python**:

<blockquote>
– 1 больше 2?

– нет (False)
</blockquote>

Вроде достаточно просто! **Python** также имеет ключевые слова ``or``, ``and`` и ``not``, обозначающие «или», «и» и «не» соответственно:
* `and` возвращает True, если оба выражения равны **True**;
* `or` возвращает True, если хотя бы одно из двух выражений равно **True**;
* `not` меняет значение выражения на противоположное.


Благодаря этому вы можете составлять более сложные логические выражения:
"""

x = 5
y = 10

isTrue = not(((x < y) or (x >= y)) == (x != y))  # Вычисление сложного логического выражения
print(isTrue)                                    # Вывод результата

"""isTrue = not(((x < y) or (x >= y)) == (x != y))
Разберем выражение выше по частям. Сначала выполняются операции в скобках. `or` и `and` выполняются, когда определены их аргументы:
1. `x < y` – x меньше y? **Да (True)**
2. `x >= y` – x больше либо равен y? **Нет (False)**
3. `(x < y) or (x >= y)` - подставляя вместо вычисленных подвыражений **True** и **False**, получим результат `True or False` = **Да (True)**
4. `x != y` – x не равен y? **Да (True)**
5. `((x < y) or (x >= y)) == (x != y)` – результаты значений в скобках уже подсчитаны. **True** равно **True**? **Да (True)**
6. в самом конце оператор `not` меняет значение на противоположное – исходное значение равно **True**, значит на выходе - **False**.

А теперь изучим то, что позволит программе вести себя по-разному в зависимости от условий – **условный оператор**.

<h3> <strong> Условный оператор </strong> </h3>

Напишем программу, на вход которой пользователь будет подавать два числа, а на выходе получать результат сравнения этих чисел.

То есть программа будет печатать, какое число больше, а какое меньше, или что они равны.

Чтобы выполнить эту задачу, изучим структуру условного оператора. Она выглядит следующим образом:

**if** логическое_условие:

&emsp;&emsp;```блок кода```

&emsp;&emsp;(выполняется, *если логическое_условие* истинно)

**elif** второе_логическое_условие:

&emsp;&emsp;```блок кода```

&emsp;&emsp;(выполняется, если *логическое_условие* ложно, а *второе_логическое_условие* истинно)

**else:**

&emsp;&emsp;```блок кода```

&emsp;&emsp;(выполняется, если все условия ложны)

Вам будет легче понять структуру и суть условного оператора, если вы переведете ключевые слова на русский.
* if – если;
* elif (else if) – в противном случае, если;
* else – в противном случае.

Таким образом, вы буквально говорите компьютеру:
* если a меньше b, то напиши на экране "a < b";
* в противном случае, если a больше b, то напиши на экране "a > b";
* во всех остальных случаях напиши на экране "a = b".

Напишем то же самое, только на языке **Python**:
"""

# Cначала нужно объявить переменные:
# в них будут записаны числа, которые введет пользователь.
# input() дает на выходе строку, поэтому с помощью функции int()
# необходимо преобразовать введенную строку к числовому типу данных
a = int(input("Введите a: "))
b = int(input("Введите b: "))

if a > b:                                 # Если a больше b
    print(a, '>', b)                      # Вывести "а > b"
elif a < b:                               # В противном случае, если a меньше b
    print(a, '<', b)                      # Вывести "a < b"
else:                                     # В остальных случаях
    print(a, '==', b)                     # Вывести "a == b"

"""---
**Важно: обратите внимание на отступы после команд `if`, `elif` и `else`. Эти отступы обозначают блок, который будет выполняться при срабатывании команды `if`.**

---

Рассмотрим две принципиально разные записи:
"""

if a > b:
    print(a, '>', b)
    if a != b:               # Проверка этого условия запустится только в том случае, если выполнится предыдущее
        print(a, '!=', b)

"""И второй вариант:"""

if a > b:
    print(a, '>', b)
if a != b:                   # Проверка этого условия запустится в любом случае, вне зависимости от выполнения предыдущего
    print(a, '!=', b)

"""Таким образом, один блок `if` может содержать в себе другой. Условный оператор `if` открывает перед вами массу возможностей.

В следующем разделе вы изучите не менее важное понятие – **циклы**, а также познакомитесь с **составными типами данных** (списки, кортежи, словари), и научитесь создавать свои собственные функции!

**Содержание темы**

1. Часть 1

2. [Часть 2](https://colab.research.google.com/drive/1Jqy7YZIk2UlL9rPphk-NtQtLpaxO-o4U?usp=sharing)
"""

